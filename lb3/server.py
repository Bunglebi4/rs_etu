from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from typing import List

app = FastAPI()
templates = Jinja2Templates(directory="templates")
#можно заменить на реальную бд
words = fruits_and_vegetables = [
    "яблоко", "абрикос", "банан", "черника", "вишня",
    "кокос", "виноград", "киви", "лимон", "лайм", "манго",
    "апельсин", "персик", "груша", "ананас", "слива",
    "арбуз", "дыня", "гранат", "грейпфрут", "мандарин",
    "папайя", "гуава", "маракуйя", "инжир", "хурма",
    "фейхоа", "крыжовник", "смородина", "малина", "ежевика",
    "клубника", "земляника", "клюква", "брусника", "облепиха",
    "рябина", "айва", "алыча", "черешня", "шелковица",
    "финик", "курага", "изюм", "чернослив", "инжир сушеный",
    "картофель", "морковь", "свекла", "редис", "редиска",
    "репа", "брюква", "капуста", "цветная капуста", "брокколи",
    "брюссельская капуста", "кольраби", "салат", "шпинат",
    "укроп", "петрушка", "сельдерей", "лук", "чеснок",
    "перец", "болгарский перец", "острый перец", "помидор",
    "огурец", "кабачок", "тыква", "патиссон", "баклажан",
    "артишок", "спаржа", "зеленый горошек", "фасоль", "чечевица",
    "нут", "кукуруза", "горох", "бобы", "соя",
    "авокадо", "оливки", "маслины", "каперсы", "имбирь",
    "куркума", "базилик", "розмарин", "тимьян", "орегано",
    "мята", "мелисса", "кинза", "руккола", "щавель",
    "ревень", "хрен", "редис дайкон", "редис черный", "редис белый",
    "редис зеленый", "редис красный", "редис фиолетовый", "редис желтый",
    "редис розовый", "редис оранжевый", "редис синий", "редис коричневый",
    "редис бело-розовый", "редис красно-белый", "редис зелено-белый",
    "редис желто-зеленый", "редис оранжево-красный", "редис фиолетово-белый",
    "редис сине-зеленый", "редис коричнево-желтый", "редис розово-белый",
    "редис оранжево-желтый", "редис фиолетово-красный", "редис сине-белый",
    "редис коричнево-зеленый", "редис розово-красный", "редис оранжево-зеленый",
    "редис фиолетово-желтый", "редис сине-красный", "редис коричнево-белый",
    "редис розово-зеленый", "редис оранжево-белый", "редис фиолетово-зеленый",
    "редис сине-желтый", "редис коричнево-красный", "редис розово-желтый",
    "редис оранжево-фиолетовый", "редис фиолетово-оранжевый", "редис сине-фиолетовый",
    "редис коричнево-фиолетовый", "редис розово-фиолетовый", "редис оранжево-синий",
    "редис фиолетово-синий", "редис сине-оранжевый", "редис коричнево-синий",
    "редис розово-синий", "редис оранжево-коричневый", "редис фиолетово-коричневый",
    "редис сине-коричневый", "редис коричнево-оранжевый", "редис розово-коричневый",
    "редис оранжево-розовый", "редис фиолетово-розовый", "редис сине-розовый",
    "редис коричнево-розовый", "редис розово-оранжевый", "редис оранжево-фиолетово-розовый",
    "редис фиолетово-оранжево-розовый", "редис сине-оранжево-розовый", "редис коричнево-оранжево-розовый",
    "редис розово-оранжево-фиолетовый", "редис оранжево-фиолетово-синий", "редис фиолетово-оранжево-синий",
    "редис сине-оранжево-фиолетовый", "редис коричнево-оранжево-фиолетовый", "редис розово-оранжево-синий",
    "редис оранжево-фиолетово-коричневый", "редис фиолетово-оранжево-коричневый", "редис сине-оранжево-коричневый",
    "редис коричнево-оранжево-фиолетовый", "редис розово-оранжево-коричневый", "редис оранжево-фиолетово-розово-синий",
    "редис фиолетово-оранжево-розово-синий", "редис сине-оранжево-розово-фиолетовый", "редис коричнево-оранжево-розово-фиолетовый",
    "редис розово-оранжево-фиолетово-синий", "редис оранжево-фиолетово-сине-коричневый", "редис фиолетово-оранжево-сине-коричневый",
    "редис сине-оранжево-фиолетово-коричневый", "редис коричнево-оранжево-фиолетово-синий", "редис розово-оранжево-фиолетово-коричневый"
]

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("autocomplete.html", {"request": request})

@app.get("/autocomplete")
async def autocomplete(prefix: str) -> List[str]:
    prefix = prefix.lower()
    return [word for word in words if word.startswith(prefix)][:5]  # Возвращаем первые 5 совпадений